# Always updated and testable docs
with Go Tools
27 Feb 2021

Loh Siu Yin
Engineering Manager, Xendit
siuyin@xendit.co

## README.md's go out of date
README.md:
```
This code performs function a.
```
---

While in main.go:
```
func main() {
  aFunc()
  bFunc()
  cFunc()
}
```

---

And some time later:
```
func main() {
  bFunc()
  cFunc()
}
```

---

We need a tool that can document the code itself.

## Is there a tool that will document code functions?

## godoc or Doxygen or javadoc ...

## Getting godoc

go get golang.org/x/tools/cmd/godoc

and put ~/go/bin in your PATH.

## What are godoc's limitations?

cmd/eg-godoc/main.go:

.code cmd/eg-godoc/main.go /^func main\(/,/^}/

.code cmd/eg-godoc/main.go /^func aFunc\(/,/^}/


Let's run godoc and see how it documents:
1. main.go
1. mypkg.AFunc

```
godoc -http :8080

search: siuyin
```

## What did we just see?

- godoc does not document main functions at all.

- mypkg public function AFunc was properly documented.


However the private function aFunc in,  
cmd/eg-godoc/main.go was not documented.

Of course you say. aFunc is private!

## Opaque "main" function

I sometimes see this  
cmd/eg-app/main.go:

.code cmd/eg-app/main.go /^func main\(/,/^}/

.code mypkg/mypkg.go /^\/\/ App /,/^}/

Let's look at godoc for mypkg.App()

## Please refactor to expose public functions

"This happens because you haven't yet refactored your code"

"You should expose main capabilities as public functions"

But who writes a main.go, on the first try,   
completely implemented with package public functions?

Most of us start by writing local private functions, then refactor.

---

Sometimes to make your intent clear, you need to document your
implementation details.

These are usually private functions. Godoc will not show them to you.  
Unless you dig into the code itself.

## What can we do about this situation?

## Intent + Implementation
Documentation is most useful when:
1. Your documentation intent,
1. coincides / is expressed by your implementation

Jupyter notebooks are extremely popular because they
implement and document at the same time, in one place.

Traditional languages like Go have their implementation
spread over multiple source files.

And often have separate documentation files like `README.md`s.

## Linking Intent with Implementation
What if you could have a documentation product that  
links, pulls-in,  
the implementation?

You decide what you want to document -- your intent  
and let the code, the implementation, speak for itself.

Such a tool exists  
today, right now!

You're looking at it -- `go present`


## Getting  go present

Go present is a go tool:

1. Download Go from [https://golang.org/](https://golang.org/).

1. go get "golang.org/x/tools/cmd/present"

1. Include the `present` binary in your PATH; typically PATH=~/go/bin:$PATH

1. Run it with:
```
$ present

or 

$ present -http :3999 -orighost 127.0.0.1
```

## go present's two personalities
1. slide -- this is what you are seeing now
1. article -- presents your code in a long-form article format


Let's have a look at how `present`'s article format can use used.

[mydoc.article](mydoc.article)

## Testable documentation

Code gets refactored all the time.

One powerful refactoring technique is to rename functions to
better reflect their intent.

Lets rename aFunc in cmd/eg-godoc/main.go to aFunction.

Let's see the effect of that refactor on
[mydoc.article](mydoc.article).

---

Revert the rename and check 
[mydoc.article](mydoc.article) again.

## Under the hood
Let's look at mydoc.article source.

---

The `go present` source is essentially an extended version of markdown.

Useful commands:

- .code {filename} /start regexp/,/end regexp/

- .play {filename.go} /start regexp/,/end regexp/

- .image {img.png} height width

- .link {url}

## Presentation and code download

.link https://github.com/siuyin/present-go-updated-testable-docs

---

**Xedit is hiring:**
1. Send your resume to: careers@xendit.co
1. Mention teams: "Ops Automation" and "Engineering Ops"
